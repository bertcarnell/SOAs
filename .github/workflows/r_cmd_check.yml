name: R-CMD-check

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'README.Rmd'
      - '_pkgdown.yml'
      - 'SOAs.Rproj'
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: windows-latest, r: 'devel'}
          #- {os: macOS-latest, r: 'release'}
          - {os: macOS-latest, r: 'devel'}
          - {os: ubuntu-latest, r: 'release'}
          - {os: ubuntu-latest, r: 'devel'}

    steps:
      - name: Check out SOAs
        uses: actions/checkout@v2

      - name: Set up R ${{ matrix.config.r }}
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      - name: Pandoc
        uses: r-lib/actions/setup-pandoc@master

      - name: Linux System Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgmp3-dev libcurl4-openssl-dev

      - name: MacOS System dependencies and source gmp
        # from the arrangements package github actions script
        if: runner.os == 'macOS'
        run: |
          brew install gmp
          Rscript -e "install.packages('gmp', type = 'source')"

      - name: Install R build Dependencies
        run: |
          install.packages(c("remotes", "rcmdcheck"))
        shell: Rscript {0}

      - name: Install SOAs dependencies
        run: |
          remotes::install_deps(pkgdir = ".", dependencies = TRUE)
        shell: Rscript {0}

      - name: Check
        if: ( matrix.config.os == 'ubuntu-latest' && matrix.config.r == 'devel' ) == false
        run: rcmdcheck::rcmdcheck(".", args = c("--as-cran", "--no-manual"), error_on = "warning")
        shell: Rscript {0}

      - name: Code Coverage
        if: matrix.config.os == 'windows-latest' && matrix.config.r == 'release'
        # run code coverage, excluding functions that will be removed.
        run: |
          install.packages("covr")
          covr::codecov(function_exclusions = c("OSOAregulart","OSOApb","permopt","BsFromB"))
        shell: Rscript {0}

      - name: Install Valgrind (Linux-rdevel only)
        if: matrix.config.os == 'ubuntu-latest' && matrix.config.r == 'devel'
        run: sudo apt-get install valgrind

      - name: Check Valgrind (Linux-rdevel only)
        if: matrix.config.os == 'ubuntu-latest' && matrix.config.r == 'devel'
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
          # https://www.valgrind.org/docs/manual/manual-core.html
          VALGRIND_OPTS: "--leak-check=full --track-origins=yes"
          # https://www.stats.ox.ac.uk/pub/bdr/memtests/README.txt
          RJAVA_JVM_STACK_WORKAROUND: 0
          R_DONT_USE_TK: true
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--use-valgrind"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
